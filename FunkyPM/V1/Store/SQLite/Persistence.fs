//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace FunkyPM.V1.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Common
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// This record was generated via Freql.Tools on 24/05/2025 10:55:33
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `file_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type FileType =
        { [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("contentType")>] ContentType: int64
          [<JsonPropertyName("extension")>] Extension: string }
    
        static member Blank() =
            { Name = String.Empty
              ContentType = 0L
              Extension = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE file_types
(
    name         TEXT    not null
        constraint file_types_pk
            primary key,
    content_type integer not null,
    extension    TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              file_types.`name`,
              file_types.`content_type`,
              file_types.`extension`
        FROM file_types
        """
    
        static member TableName() = "file_types"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ FileType.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  FileType.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  FileType.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_version_categories`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersionCategory =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("parent")>] Parent: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemGroupVersionId = String.Empty
              Name = String.Empty
              Parent = None
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "item_group_version_categories"
(
    id                    TEXT    not null
        constraint item_group_version_categories_pk
            primary key,
    item_group_version_id TEXT    not null
        constraint item_group_version_categories_item_group_versions_id_fk
            references item_group_versions,
    name                  TEXT    not null,
    parent                TEXT
        constraint item_group_version_categories_item_group_version_categories_id_fk
            references item_group_version_categories,
    created_on            TEXT    not null,
    active                INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_version_categories.`id`,
              item_group_version_categories.`item_group_version_id`,
              item_group_version_categories.`name`,
              item_group_version_categories.`parent`,
              item_group_version_categories.`created_on`,
              item_group_version_categories.`active`
        FROM item_group_version_categories
        """
    
        static member TableName() = "item_group_version_categories"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersionCategory.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersionCategory.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersionCategory.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_version_categories_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersionCategoriesMetadataItem =
        { [<JsonPropertyName("categoryId")>] CategoryId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { CategoryId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE item_group_version_categories_metadata
(
    category_id TEXT not null
        constraint item_group_version_categories_metadata_item_group_version_categories_id_fk
            references item_group_version_categories,
    item_key    TEXT not null,
    item_value  TEXT not null, inherit integer not null,
    constraint item_group_version_categories_metadata_pk
        primary key (category_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_version_categories_metadata.`category_id`,
              item_group_version_categories_metadata.`item_key`,
              item_group_version_categories_metadata.`item_value`,
              item_group_version_categories_metadata.`inherit`
        FROM item_group_version_categories_metadata
        """
    
        static member TableName() = "item_group_version_categories_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersionCategoriesMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersionCategoriesMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersionCategoriesMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersionMetadataItem =
        { [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ItemGroupVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE item_group_version_metadata
(
    item_group_version_id TEXT not null
        constraint item_group_version_metadata_item_group_versions_id_fk
            references item_group_versions,
    item_key              TEXT not null,
    item_value            TEXT not null,
    constraint item_group_version_metadata_pk
        primary key (item_group_version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_version_metadata.`item_group_version_id`,
              item_group_version_metadata.`item_key`,
              item_group_version_metadata.`item_value`
        FROM item_group_version_metadata
        """
    
        static member TableName() = "item_group_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_version_status_type_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersionStatusTypesMetadataItem =
        { [<JsonPropertyName("statusTypeId")>] StatusTypeId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { StatusTypeId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "item_group_version_status_type_metadata"
(
    status_type_id TEXT not null
        constraint item_group_version_status_type_metadata_item_group_version_status_type_id_fk
            references "item_group_version_status_types",
    item_key       TEXT not null,
    item_value     TEXT not null, inherit integer not null,
    constraint item_group_version_status_type_metadata_pk
        primary key (status_type_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_version_status_type_metadata.`status_type_id`,
              item_group_version_status_type_metadata.`item_key`,
              item_group_version_status_type_metadata.`item_value`,
              item_group_version_status_type_metadata.`inherit`
        FROM item_group_version_status_type_metadata
        """
    
        static member TableName() = "item_group_version_status_type_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersionStatusTypesMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersionStatusTypesMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersionStatusTypesMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_version_status_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersionStatusType =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              ItemGroupVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "item_group_version_status_types"
(
    id                    TEXT    not null
        constraint item_group_version_status_type_pk
            primary key,
    name                  TEXT    not null,
    item_group_version_id TEXT    not null
        constraint item_group_version_status_type_item_group_versions_id_fk
            references item_group_versions,
    created_on            TEXT    not null,
    active                INTEGER not null,
    constraint item_group_version_status_type_uk
        unique (name, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_version_status_types.`id`,
              item_group_version_status_types.`name`,
              item_group_version_status_types.`item_group_version_id`,
              item_group_version_status_types.`created_on`,
              item_group_version_status_types.`active`
        FROM item_group_version_status_types
        """
    
        static member TableName() = "item_group_version_status_types"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersionStatusType.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersionStatusType.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersionStatusType.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemGroupId")>] ItemGroupId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              ItemGroupId = String.Empty
              Version = 0
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE item_group_versions
(
    id            TEXT    not null
        constraint item_group_versions_pk
            primary key,
    item_group_id TEXT    not null
        constraint item_group_versions_item_groups_id_fk
            references item_groups,
    version       INTEGER not null,
    created_on    TEXT    not null,
    constraint item_group_versions_uk_2
        unique (item_group_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_versions.`id`,
              item_group_versions.`item_group_id`,
              item_group_versions.`version`,
              item_group_versions.`created_on`
        FROM item_group_versions
        """
    
        static member TableName() = "item_group_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_group_versions_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroupVersionsMetadataItem =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { VersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE item_group_versions_metadata
(
    version_id TEXT not null
        constraint item_group_versions_metadata_item_group_versions_id_fk
            references item_group_versions,
    item_key   TEXT not null,
    item_value TEXT not null, inherit integer not null,
    constraint item_group_versions_metadata_pk
        primary key (version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_group_versions_metadata.`version_id`,
              item_group_versions_metadata.`item_key`,
              item_group_versions_metadata.`item_value`,
              item_group_versions_metadata.`inherit`
        FROM item_group_versions_metadata
        """
    
        static member TableName() = "item_group_versions_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroupVersionsMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroupVersionsMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroupVersionsMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_groups`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemGroup =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE item_groups
(
    id         TEXT    not null
        constraint item_groups_pk
            primary key,
    project_id TEXT    not null
        constraint item_groups_project_id_fk
            references "projects",
    name       TEXT    not null,
    created_on TEXT    not null,
    active     INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              item_groups.`id`,
              item_groups.`project_id`,
              item_groups.`name`,
              item_groups.`created_on`,
              item_groups.`active`
        FROM item_groups
        """
    
        static member TableName() = "item_groups"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemGroup.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemGroup.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemGroup.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_version_artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersionArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE item_version_artifact_metadata
(
    artifact_id TEXT not null
        constraint item_version_artifact_metadata_item_version_artifacts_id_fk
            references item_version_artifacts,
    item_key    TEXT not null,
    item_value  TEXT not null, inherit integer not null,
    constraint item_version_artifact_metadata_pk
        primary key (artifact_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_version_artifact_metadata.`artifact_id`,
              item_version_artifact_metadata.`item_key`,
              item_version_artifact_metadata.`item_value`,
              item_version_artifact_metadata.`inherit`
        FROM item_version_artifact_metadata
        """
    
        static member TableName() = "item_version_artifact_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersionArtifactMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersionArtifactMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersionArtifactMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_version_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersionArtifact =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemVersionId")>] ItemVersionId: string option
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("version")>] Version: int option
          [<JsonPropertyName("rawBlob")>] RawBlob: BlobField option
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("fileType")>] FileType: int64 option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime option
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemVersionId = None
              Name = None
              Version = None
              RawBlob = None
              Hash = String.Empty
              FileType = None
              CreatedOn = None
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE item_version_artifacts
(
    id              TEXT    not null
        constraint item_version_artifacts_pk
            primary key,
    item_version_id TEXT,
    name            TEXT,
    version         INTEGER,
    raw_blob        BLOB,
    hash            TEXT    not null,
    file_type       integer,
    created_on      TEXT,
    active          INTEGER not null,
    constraint item_version_artifacts_uk
        unique (item_version_id, name, version),
    constraint item_version_artifacts_file_types_id_name_fk
        foreign key (item_version_id, file_type) references file_types (id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_version_artifacts.`id`,
              item_version_artifacts.`item_version_id`,
              item_version_artifacts.`name`,
              item_version_artifacts.`version`,
              item_version_artifacts.`raw_blob`,
              item_version_artifacts.`hash`,
              item_version_artifacts.`file_type`,
              item_version_artifacts.`created_on`,
              item_version_artifacts.`active`
        FROM item_version_artifacts
        """
    
        static member TableName() = "item_version_artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersionArtifact.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersionArtifact.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersionArtifact.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_version_categories`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersionCategory =
        { [<JsonPropertyName("itemVersionId")>] ItemVersionId: string
          [<JsonPropertyName("categoryId")>] CategoryId: string }
    
        static member Blank() =
            { ItemVersionId = String.Empty
              CategoryId = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE item_version_categories
(
    item_version_id TEXT not null
        constraint item_version_categories_item_version_id_fk
            references "item_versions",
    category_id     TEXT not null
        constraint item_version_categories_item_group_version_categories_id_fk
            references item_group_version_categories,
    constraint item_version_categories_pk
        primary key (item_version_id, category_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_version_categories.`item_version_id`,
              item_version_categories.`category_id`
        FROM item_version_categories
        """
    
        static member TableName() = "item_version_categories"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersionCategory.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersionCategory.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersionCategory.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_version_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersionLink =
        { [<JsonPropertyName("item1Id")>] Item1Id: string option
          [<JsonPropertyName("item2Id")>] Item2Id: string option }
    
        static member Blank() =
            { Item1Id = None
              Item2Id = None }
    
        static member CreateTableSql() = """
        CREATE TABLE item_version_links
(
    item_1_id TEXT
        constraint item_version_links_item_version_id_fk
            references "item_versions",
    item_2_id TEXT
        constraint item_version_links_item_version_id_fk_2
            references "item_versions",
    constraint item_version_links_pk
        primary key (item_1_id, item_2_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_version_links.`item_1_id`,
              item_version_links.`item_2_id`
        FROM item_version_links
        """
    
        static member TableName() = "item_version_links"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersionLink.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersionLink.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersionLink.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersionMetadataItem =
        { [<JsonPropertyName("itemVersionId")>] ItemVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { ItemVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE item_version_metadata
(
    item_version_id TEXT not null
        constraint item_version_metadata_item_version_id_fk
            references "item_versions",
    item_key        TEXT not null,
    item_value      TEXT not null, inherit integer not null,
    constraint item_version_metadata_pk
        primary key (item_version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_version_metadata.`item_version_id`,
              item_version_metadata.`item_key`,
              item_version_metadata.`item_value`,
              item_version_metadata.`inherit`
        FROM item_version_metadata
        """
    
        static member TableName() = "item_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersionTag =
        { [<JsonPropertyName("itemVersionId")>] ItemVersionId: string
          [<JsonPropertyName("tag")>] Tag: string option }
    
        static member Blank() =
            { ItemVersionId = String.Empty
              Tag = None }
    
        static member CreateTableSql() = """
        CREATE TABLE item_version_tags
(
    item_version_id TEXT not null
        constraint item_version_tags_item_version_id_fk
            references "item_versions",
    tag             TEXT,
    constraint item_version_tags_pk
        primary key (item_version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_version_tags.`item_version_id`,
              item_version_tags.`tag`
        FROM item_version_tags
        """
    
        static member TableName() = "item_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersionTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersionTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersionTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `item_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ItemVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemId")>] ItemId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("status")>] Status: string
          [<JsonPropertyName("rawBlob")>] RawBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemId = String.Empty
              Name = String.Empty
              Version = 0
              Status = String.Empty
              RawBlob = BlobField.Empty()
              Hash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "item_versions"
(
    id         TEXT    not null
        constraint item_version_pk
            primary key,
    item_id    TEXT    not null
        constraint item_version_items_id_fk
            references items,
    name       TEXT    not null,
    version    INTEGER not null,
    status     TEXT    not null
        constraint item_version_item_group_version_status_type_id_fk
            references "item_group_version_status_types",
    raw_blob   BLOB    not null,
    hash       TEXT    not null,
    file_type  TEXT    not null
        constraint item_version_file_types_name_fk
            references file_types,
    created_on TEXT    not null,
    active     INTEGER not null,
    constraint item_version_uk
        unique (item_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              item_versions.`id`,
              item_versions.`item_id`,
              item_versions.`name`,
              item_versions.`version`,
              item_versions.`status`,
              item_versions.`raw_blob`,
              item_versions.`hash`,
              item_versions.`file_type`,
              item_versions.`created_on`,
              item_versions.`active`
        FROM item_versions
        """
    
        static member TableName() = "item_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ItemVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ItemVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ItemVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `items`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type Item =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemGroupVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE items
(
    id                    TEXT    not null
        constraint items_pk
            primary key,
    item_group_version_id TEXT    not null
        constraint items_item_group_versions_id_fk
            references item_group_versions,
    created_on            TEXT    not null,
    active                INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              items.`id`,
              items.`item_group_version_id`,
              items.`created_on`,
              items.`active`
        FROM items
        """
    
        static member TableName() = "items"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Item.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Item.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Item.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_events`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ProjectEvents =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("eventTimestamp")>] EventTimestamp: string
          [<JsonPropertyName("eventType")>] EventType: string
          [<JsonPropertyName("eventBlob")>] EventBlob: string }
    
        static member Blank() =
            { ProjectId = String.Empty
              EventTimestamp = String.Empty
              EventType = String.Empty
              EventBlob = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE project_events
(
    project_id      TEXT not null
        constraint project_events_project_id_fk
            references "projects",
    event_timestamp TEXT not null,
    event_type      TEXT not null,
    event_blob      TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              project_events.`project_id`,
              project_events.`event_timestamp`,
              project_events.`event_type`,
              project_events.`event_blob`
        FROM project_events
        """
    
        static member TableName() = "project_events"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectEvents.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectEvents.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectEvents.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `project_resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ProjectResources =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE project_resources
(
    id         TEXT    not null
        constraint project_resources_pk
            primary key,
    project_id TEXT    not null
        constraint project_resources_project_id_fk
            references "projects",
    created_on TEXT    not null,
    active     INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              project_resources.`id`,
              project_resources.`project_id`,
              project_resources.`created_on`,
              project_resources.`active`
        FROM project_resources
        """
    
        static member TableName() = "project_resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ProjectResources.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ProjectResources.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ProjectResources.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `projects`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type Project =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "projects"
(
    id         TEXT not null
        constraint project_pk
            primary key,
    name       TEXT not null,
    created_on TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              projects.`id`,
              projects.`name`,
              projects.`created_on`
        FROM projects
        """
    
        static member TableName() = "projects"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Project.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Project.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Project.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `resource_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ResourceVersionMetadataItem =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { ResourceVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE resource_version_metadata
(
    resource_version_id TEXT not null
        constraint resource_version_metadata_pk
            primary key,
    item_key            TEXT not null,
    item_value          TEXT not null
, inherit integer not null)
        """
    
        static member SelectSql() = """
        SELECT
              resource_version_metadata.`resource_version_id`,
              resource_version_metadata.`item_key`,
              resource_version_metadata.`item_value`,
              resource_version_metadata.`inherit`
        FROM resource_version_metadata
        """
    
        static member TableName() = "resource_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `resource_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type ResourceVersion =
        { [<JsonPropertyName("id")>] Id: int64
          [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("rawBlob")>] RawBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("fileType")>] FileType: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = 0L
              ResourceId = String.Empty
              Name = String.Empty
              Version = 0
              RawBlob = BlobField.Empty()
              Hash = String.Empty
              FileType = None
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "resource_versions"
(
    id          integer not null
        constraint resource_version_pk
            primary key,
    resource_id TEXT    not null,
    name        TEXT    not null,
    version     integer not null,
    raw_blob    BLOB    not null,
    hash        TEXT    not null,
    file_type   TEXT,
    created_on  TEXT    not null,
    active      INTEGER not null,
    constraint resource_version_uk
        unique (resource_id, version),
    constraint resource_version_file_types_id_name_fk
        foreign key (resource_id, file_type) references file_types (id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              resource_versions.`id`,
              resource_versions.`resource_id`,
              resource_versions.`name`,
              resource_versions.`version`,
              resource_versions.`raw_blob`,
              resource_versions.`hash`,
              resource_versions.`file_type`,
              resource_versions.`created_on`,
              resource_versions.`active`
        FROM resource_versions
        """
    
        static member TableName() = "resource_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// <remarks>
/// This record was generated via Freql.Tools on 24/05/2025 10:55:33
/// </remarks>
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `file_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewFileType =
        { [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("contentType")>] ContentType: int64
          [<JsonPropertyName("extension")>] Extension: string }
    
        static member Blank() =
            { Name = String.Empty
              ContentType = 0L
              Extension = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_version_categories`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersionCategory =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("parent")>] Parent: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemGroupVersionId = String.Empty
              Name = String.Empty
              Parent = None
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_version_categories_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersionCategoriesMetadataItem =
        { [<JsonPropertyName("categoryId")>] CategoryId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { CategoryId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersionMetadataItem =
        { [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ItemGroupVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_version_status_type_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersionStatusTypesMetadataItem =
        { [<JsonPropertyName("statusTypeId")>] StatusTypeId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { StatusTypeId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_version_status_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersionStatusType =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              ItemGroupVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemGroupId")>] ItemGroupId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              ItemGroupId = String.Empty
              Version = 0
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `item_group_versions_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroupVersionsMetadataItem =
        { [<JsonPropertyName("versionId")>] VersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { VersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `item_groups`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemGroup =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `item_version_artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersionArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `item_version_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersionArtifact =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemVersionId")>] ItemVersionId: string option
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("version")>] Version: int option
          [<JsonPropertyName("rawBlob")>] RawBlob: BlobField option
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("fileType")>] FileType: int64 option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime option
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemVersionId = None
              Name = None
              Version = None
              RawBlob = None
              Hash = String.Empty
              FileType = None
              CreatedOn = None
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `item_version_categories`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersionCategory =
        { [<JsonPropertyName("itemVersionId")>] ItemVersionId: string
          [<JsonPropertyName("categoryId")>] CategoryId: string }
    
        static member Blank() =
            { ItemVersionId = String.Empty
              CategoryId = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `item_version_links`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersionLink =
        { [<JsonPropertyName("item1Id")>] Item1Id: string option
          [<JsonPropertyName("item2Id")>] Item2Id: string option }
    
        static member Blank() =
            { Item1Id = None
              Item2Id = None }
    
    /// <summary>
    /// A record representing a new row in the table `item_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersionMetadataItem =
        { [<JsonPropertyName("itemVersionId")>] ItemVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { ItemVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `item_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersionTag =
        { [<JsonPropertyName("itemVersionId")>] ItemVersionId: string
          [<JsonPropertyName("tag")>] Tag: string option }
    
        static member Blank() =
            { ItemVersionId = String.Empty
              Tag = None }
    
    /// <summary>
    /// A record representing a new row in the table `item_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItemVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemId")>] ItemId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("status")>] Status: string
          [<JsonPropertyName("rawBlob")>] RawBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemId = String.Empty
              Name = String.Empty
              Version = 0
              Status = String.Empty
              RawBlob = BlobField.Empty()
              Hash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `items`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewItem =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("itemGroupVersionId")>] ItemGroupVersionId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ItemGroupVersionId = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `project_events`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewProjectEvents =
        { [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("eventTimestamp")>] EventTimestamp: string
          [<JsonPropertyName("eventType")>] EventType: string
          [<JsonPropertyName("eventBlob")>] EventBlob: string }
    
        static member Blank() =
            { ProjectId = String.Empty
              EventTimestamp = String.Empty
              EventType = String.Empty
              EventBlob = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `project_resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewProjectResources =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("projectId")>] ProjectId: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              ProjectId = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `projects`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewProject =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `resource_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewResourceVersionMetadataItem =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("inherit")>] Inherit: int64 }
    
        static member Blank() =
            { ResourceVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              Inherit = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `resource_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    type NewResourceVersion =
        { [<JsonPropertyName("id")>] Id: int64
          [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("rawBlob")>] RawBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("fileType")>] FileType: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = 0L
              ResourceId = String.Empty
              Name = String.Empty
              Version = 0
              RawBlob = BlobField.Empty()
              Hash = String.Empty
              FileType = None
              CreatedOn = DateTime.UtcNow
              Active = true }
    
/// <remarks>
/// This record was generated via Freql.Tools on 24/05/2025 10:55:33
/// </remarks>
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.FileType` from the table `file_types`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectFileTypeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectFileTypeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.FileType>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectFileTypeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectFileTypeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.FileType>(sql, parameters)
    /// <summary>
    /// Select a `Records.FileType` from the table `file_types`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectFileTypeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectFileTypeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.FileType>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectFileTypeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectFileTypeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.FileType>(sql, parameters)
    
    let insertFileType (context: SqliteContext) (parameters: Parameters.NewFileType) =
        context.Insert("file_types", parameters)
    
    let tryInsertFileType (context: SqliteContext) (parameters: Parameters.NewFileType) =
        context.TryInsert("file_types", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersionCategory` from the table `item_group_version_categories`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersionCategory&gt;` and uses Records.ItemGroupVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionCategoryRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionCategoryRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategory.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersionCategory>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersionCategory&gt;` and uses Records.ItemGroupVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionCategoryRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionCategoryRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategory.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersionCategory>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersionCategory` from the table `item_group_version_categories`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersionCategory&gt;` and uses Records.ItemGroupVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionCategoryRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionCategoryRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategory.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersionCategory>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersionCategory&gt;` and uses Records.ItemGroupVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionCategoryRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionCategoryRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategory.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersionCategory>(sql, parameters)
    
    let insertItemGroupVersionCategory (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionCategory) =
        context.Insert("item_group_version_categories", parameters)
    
    let tryInsertItemGroupVersionCategory (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionCategory) =
        context.TryInsert("item_group_version_categories", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersionCategoriesMetadataItem` from the table `item_group_version_categories_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersionCategoriesMetadataItem&gt;` and uses Records.ItemGroupVersionCategoriesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionCategoriesMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionCategoriesMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategoriesMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersionCategoriesMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersionCategoriesMetadataItem&gt;` and uses Records.ItemGroupVersionCategoriesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionCategoriesMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionCategoriesMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategoriesMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersionCategoriesMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersionCategoriesMetadataItem` from the table `item_group_version_categories_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersionCategoriesMetadataItem&gt;` and uses Records.ItemGroupVersionCategoriesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionCategoriesMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionCategoriesMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategoriesMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersionCategoriesMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersionCategoriesMetadataItem&gt;` and uses Records.ItemGroupVersionCategoriesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionCategoriesMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionCategoriesMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionCategoriesMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersionCategoriesMetadataItem>(sql, parameters)
    
    let insertItemGroupVersionCategoriesMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionCategoriesMetadataItem) =
        context.Insert("item_group_version_categories_metadata", parameters)
    
    let tryInsertItemGroupVersionCategoriesMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionCategoriesMetadataItem) =
        context.TryInsert("item_group_version_categories_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersionMetadataItem` from the table `item_group_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersionMetadataItem&gt;` and uses Records.ItemGroupVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersionMetadataItem&gt;` and uses Records.ItemGroupVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersionMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersionMetadataItem` from the table `item_group_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersionMetadataItem&gt;` and uses Records.ItemGroupVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersionMetadataItem&gt;` and uses Records.ItemGroupVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersionMetadataItem>(sql, parameters)
    
    let insertItemGroupVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionMetadataItem) =
        context.Insert("item_group_version_metadata", parameters)
    
    let tryInsertItemGroupVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionMetadataItem) =
        context.TryInsert("item_group_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersionStatusTypesMetadataItem` from the table `item_group_version_status_type_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersionStatusTypesMetadataItem&gt;` and uses Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionStatusTypesMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionStatusTypesMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersionStatusTypesMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersionStatusTypesMetadataItem&gt;` and uses Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionStatusTypesMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionStatusTypesMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersionStatusTypesMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersionStatusTypesMetadataItem` from the table `item_group_version_status_type_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersionStatusTypesMetadataItem&gt;` and uses Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionStatusTypesMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionStatusTypesMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersionStatusTypesMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersionStatusTypesMetadataItem&gt;` and uses Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionStatusTypesMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionStatusTypesMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusTypesMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersionStatusTypesMetadataItem>(sql, parameters)
    
    let insertItemGroupVersionStatusTypesMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionStatusTypesMetadataItem) =
        context.Insert("item_group_version_status_type_metadata", parameters)
    
    let tryInsertItemGroupVersionStatusTypesMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionStatusTypesMetadataItem) =
        context.TryInsert("item_group_version_status_type_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersionStatusType` from the table `item_group_version_status_types`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersionStatusType&gt;` and uses Records.ItemGroupVersionStatusType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionStatusTypeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionStatusTypeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusType.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersionStatusType>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersionStatusType&gt;` and uses Records.ItemGroupVersionStatusType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionStatusTypeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionStatusTypeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusType.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersionStatusType>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersionStatusType` from the table `item_group_version_status_types`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersionStatusType&gt;` and uses Records.ItemGroupVersionStatusType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionStatusTypeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionStatusTypeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusType.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersionStatusType>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersionStatusType&gt;` and uses Records.ItemGroupVersionStatusType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionStatusTypeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionStatusTypeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionStatusType.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersionStatusType>(sql, parameters)
    
    let insertItemGroupVersionStatusType (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionStatusType) =
        context.Insert("item_group_version_status_types", parameters)
    
    let tryInsertItemGroupVersionStatusType (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionStatusType) =
        context.TryInsert("item_group_version_status_types", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersion` from the table `item_group_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersion&gt;` and uses Records.ItemGroupVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersion&gt;` and uses Records.ItemGroupVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersion>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersion` from the table `item_group_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersion&gt;` and uses Records.ItemGroupVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersion&gt;` and uses Records.ItemGroupVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersion>(sql, parameters)
    
    let insertItemGroupVersion (context: SqliteContext) (parameters: Parameters.NewItemGroupVersion) =
        context.Insert("item_group_versions", parameters)
    
    let tryInsertItemGroupVersion (context: SqliteContext) (parameters: Parameters.NewItemGroupVersion) =
        context.TryInsert("item_group_versions", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroupVersionsMetadataItem` from the table `item_group_versions_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroupVersionsMetadataItem&gt;` and uses Records.ItemGroupVersionsMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionsMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionsMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionsMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroupVersionsMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroupVersionsMetadataItem&gt;` and uses Records.ItemGroupVersionsMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupVersionsMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupVersionsMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionsMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroupVersionsMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroupVersionsMetadataItem` from the table `item_group_versions_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroupVersionsMetadataItem&gt;` and uses Records.ItemGroupVersionsMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionsMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionsMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionsMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroupVersionsMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroupVersionsMetadataItem&gt;` and uses Records.ItemGroupVersionsMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupVersionsMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupVersionsMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroupVersionsMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroupVersionsMetadataItem>(sql, parameters)
    
    let insertItemGroupVersionsMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionsMetadataItem) =
        context.Insert("item_group_versions_metadata", parameters)
    
    let tryInsertItemGroupVersionsMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemGroupVersionsMetadataItem) =
        context.TryInsert("item_group_versions_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ItemGroup` from the table `item_groups`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemGroup&gt;` and uses Records.ItemGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroup.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemGroup>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemGroup&gt;` and uses Records.ItemGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemGroupRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemGroupRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroup.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemGroup>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemGroup` from the table `item_groups`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemGroup&gt;` and uses Records.ItemGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroup.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemGroup>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemGroup&gt;` and uses Records.ItemGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemGroupRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemGroupRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemGroup.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemGroup>(sql, parameters)
    
    let insertItemGroup (context: SqliteContext) (parameters: Parameters.NewItemGroup) =
        context.Insert("item_groups", parameters)
    
    let tryInsertItemGroup (context: SqliteContext) (parameters: Parameters.NewItemGroup) =
        context.TryInsert("item_groups", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersionArtifactMetadataItem` from the table `item_version_artifact_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersionArtifactMetadataItem&gt;` and uses Records.ItemVersionArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionArtifactMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionArtifactMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersionArtifactMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersionArtifactMetadataItem&gt;` and uses Records.ItemVersionArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionArtifactMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionArtifactMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersionArtifactMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersionArtifactMetadataItem` from the table `item_version_artifact_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersionArtifactMetadataItem&gt;` and uses Records.ItemVersionArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionArtifactMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionArtifactMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersionArtifactMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersionArtifactMetadataItem&gt;` and uses Records.ItemVersionArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionArtifactMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionArtifactMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersionArtifactMetadataItem>(sql, parameters)
    
    let insertItemVersionArtifactMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemVersionArtifactMetadataItem) =
        context.Insert("item_version_artifact_metadata", parameters)
    
    let tryInsertItemVersionArtifactMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemVersionArtifactMetadataItem) =
        context.TryInsert("item_version_artifact_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersionArtifact` from the table `item_version_artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersionArtifact&gt;` and uses Records.ItemVersionArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifact.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersionArtifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersionArtifact&gt;` and uses Records.ItemVersionArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifact.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersionArtifact>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersionArtifact` from the table `item_version_artifacts`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersionArtifact&gt;` and uses Records.ItemVersionArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifact.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersionArtifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersionArtifact&gt;` and uses Records.ItemVersionArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionArtifact.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersionArtifact>(sql, parameters)
    
    let insertItemVersionArtifact (context: SqliteContext) (parameters: Parameters.NewItemVersionArtifact) =
        context.Insert("item_version_artifacts", parameters)
    
    let tryInsertItemVersionArtifact (context: SqliteContext) (parameters: Parameters.NewItemVersionArtifact) =
        context.TryInsert("item_version_artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersionCategory` from the table `item_version_categories`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersionCategory&gt;` and uses Records.ItemVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionCategoryRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionCategoryRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionCategory.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersionCategory>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersionCategory&gt;` and uses Records.ItemVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionCategoryRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionCategoryRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionCategory.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersionCategory>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersionCategory` from the table `item_version_categories`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersionCategory&gt;` and uses Records.ItemVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionCategoryRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionCategoryRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionCategory.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersionCategory>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersionCategory&gt;` and uses Records.ItemVersionCategory.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionCategoryRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionCategoryRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionCategory.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersionCategory>(sql, parameters)
    
    let insertItemVersionCategory (context: SqliteContext) (parameters: Parameters.NewItemVersionCategory) =
        context.Insert("item_version_categories", parameters)
    
    let tryInsertItemVersionCategory (context: SqliteContext) (parameters: Parameters.NewItemVersionCategory) =
        context.TryInsert("item_version_categories", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersionLink` from the table `item_version_links`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersionLink&gt;` and uses Records.ItemVersionLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionLinkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionLinkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionLink.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersionLink>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersionLink&gt;` and uses Records.ItemVersionLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionLinkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionLinkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionLink.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersionLink>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersionLink` from the table `item_version_links`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersionLink&gt;` and uses Records.ItemVersionLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionLinkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionLinkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionLink.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersionLink>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersionLink&gt;` and uses Records.ItemVersionLink.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionLinkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionLinkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionLink.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersionLink>(sql, parameters)
    
    let insertItemVersionLink (context: SqliteContext) (parameters: Parameters.NewItemVersionLink) =
        context.Insert("item_version_links", parameters)
    
    let tryInsertItemVersionLink (context: SqliteContext) (parameters: Parameters.NewItemVersionLink) =
        context.TryInsert("item_version_links", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersionMetadataItem` from the table `item_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersionMetadataItem&gt;` and uses Records.ItemVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersionMetadataItem&gt;` and uses Records.ItemVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersionMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersionMetadataItem` from the table `item_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersionMetadataItem&gt;` and uses Records.ItemVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersionMetadataItem&gt;` and uses Records.ItemVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersionMetadataItem>(sql, parameters)
    
    let insertItemVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemVersionMetadataItem) =
        context.Insert("item_version_metadata", parameters)
    
    let tryInsertItemVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewItemVersionMetadataItem) =
        context.TryInsert("item_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersionTag` from the table `item_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersionTag&gt;` and uses Records.ItemVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersionTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersionTag&gt;` and uses Records.ItemVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersionTag>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersionTag` from the table `item_version_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersionTag&gt;` and uses Records.ItemVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionTag.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersionTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersionTag&gt;` and uses Records.ItemVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersionTag.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersionTag>(sql, parameters)
    
    let insertItemVersionTag (context: SqliteContext) (parameters: Parameters.NewItemVersionTag) =
        context.Insert("item_version_tags", parameters)
    
    let tryInsertItemVersionTag (context: SqliteContext) (parameters: Parameters.NewItemVersionTag) =
        context.TryInsert("item_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ItemVersion` from the table `item_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ItemVersion&gt;` and uses Records.ItemVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ItemVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ItemVersion&gt;` and uses Records.ItemVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ItemVersion>(sql, parameters)
    /// <summary>
    /// Select a `Records.ItemVersion` from the table `item_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ItemVersion&gt;` and uses Records.ItemVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ItemVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ItemVersion&gt;` and uses Records.ItemVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ItemVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ItemVersion>(sql, parameters)
    
    let insertItemVersion (context: SqliteContext) (parameters: Parameters.NewItemVersion) =
        context.Insert("item_versions", parameters)
    
    let tryInsertItemVersion (context: SqliteContext) (parameters: Parameters.NewItemVersion) =
        context.TryInsert("item_versions", parameters)
    
    /// <summary>
    /// Select a `Records.Item` from the table `items`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Item&gt;` and uses Records.Item.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Item.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Item>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Item&gt;` and uses Records.Item.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Item.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Item>(sql, parameters)
    /// <summary>
    /// Select a `Records.Item` from the table `items`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Item&gt;` and uses Records.Item.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Item.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Item>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Item&gt;` and uses Records.Item.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Item.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Item>(sql, parameters)
    
    let insertItem (context: SqliteContext) (parameters: Parameters.NewItem) =
        context.Insert("items", parameters)
    
    let tryInsertItem (context: SqliteContext) (parameters: Parameters.NewItem) =
        context.TryInsert("items", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectEvents` from the table `project_events`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectEvents&gt;` and uses Records.ProjectEvents.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEventsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEventsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEvents.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectEvents>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectEvents&gt;` and uses Records.ProjectEvents.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectEventsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectEventsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEvents.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectEvents>(sql, parameters)
    /// <summary>
    /// Select a `Records.ProjectEvents` from the table `project_events`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ProjectEvents&gt;` and uses Records.ProjectEvents.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectProjectEventsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectProjectEventsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEvents.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ProjectEvents>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ProjectEvents&gt;` and uses Records.ProjectEvents.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectProjectEventsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectProjectEventsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectEvents.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ProjectEvents>(sql, parameters)
    
    let insertProjectEvents (context: SqliteContext) (parameters: Parameters.NewProjectEvents) =
        context.Insert("project_events", parameters)
    
    let tryInsertProjectEvents (context: SqliteContext) (parameters: Parameters.NewProjectEvents) =
        context.TryInsert("project_events", parameters)
    
    /// <summary>
    /// Select a `Records.ProjectResources` from the table `project_resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ProjectResources&gt;` and uses Records.ProjectResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectResourcesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectResourcesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectResources.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ProjectResources>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ProjectResources&gt;` and uses Records.ProjectResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectResourcesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectResourcesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectResources.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ProjectResources>(sql, parameters)
    /// <summary>
    /// Select a `Records.ProjectResources` from the table `project_resources`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ProjectResources&gt;` and uses Records.ProjectResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectProjectResourcesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectProjectResourcesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectResources.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ProjectResources>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ProjectResources&gt;` and uses Records.ProjectResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectProjectResourcesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectProjectResourcesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ProjectResources.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ProjectResources>(sql, parameters)
    
    let insertProjectResources (context: SqliteContext) (parameters: Parameters.NewProjectResources) =
        context.Insert("project_resources", parameters)
    
    let tryInsertProjectResources (context: SqliteContext) (parameters: Parameters.NewProjectResources) =
        context.TryInsert("project_resources", parameters)
    
    /// <summary>
    /// Select a `Records.Project` from the table `projects`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Project>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectProjectRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectProjectRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Project>(sql, parameters)
    /// <summary>
    /// Select a `Records.Project` from the table `projects`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectProjectRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectProjectRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Project>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Project&gt;` and uses Records.Project.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectProjectRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectProjectRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Project.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Project>(sql, parameters)
    
    let insertProject (context: SqliteContext) (parameters: Parameters.NewProject) =
        context.Insert("projects", parameters)
    
    let tryInsertProject (context: SqliteContext) (parameters: Parameters.NewProject) =
        context.TryInsert("projects", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceVersionMetadataItem` from the table `resource_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ResourceVersionMetadataItem` from the table `resource_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    
    let insertResourceVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewResourceVersionMetadataItem) =
        context.Insert("resource_version_metadata", parameters)
    
    let tryInsertResourceVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewResourceVersionMetadataItem) =
        context.TryInsert("resource_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceVersion` from the table `resource_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceVersion>(sql, parameters)
    /// <summary>
    /// Select a `Records.ResourceVersion` from the table `resource_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ResourceVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 24/05/2025 10:55:33
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ResourceVersion>(sql, parameters)
    
    let insertResourceVersion (context: SqliteContext) (parameters: Parameters.NewResourceVersion) =
        context.Insert("resource_versions", parameters)
    
    let tryInsertResourceVersion (context: SqliteContext) (parameters: Parameters.NewResourceVersion) =
        context.TryInsert("resource_versions", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.Item.InitializationSql checkIfExists
          Records.ItemGroupVersionStatusType.InitializationSql checkIfExists
          Records.FileType.InitializationSql checkIfExists
          Records.ItemVersion.InitializationSql checkIfExists
          Records.ItemVersionArtifact.InitializationSql checkIfExists
          Records.ResourceVersion.InitializationSql checkIfExists
          Records.ResourceVersionMetadataItem.InitializationSql checkIfExists
          Records.ProjectResources.InitializationSql checkIfExists
          Records.ProjectEvents.InitializationSql checkIfExists
          Records.ItemVersionTag.InitializationSql checkIfExists
          Records.ItemVersionMetadataItem.InitializationSql checkIfExists
          Records.ItemVersionLink.InitializationSql checkIfExists
          Records.ItemVersionCategory.InitializationSql checkIfExists
          Records.ItemVersionArtifactMetadataItem.InitializationSql checkIfExists
          Records.ItemGroupVersionsMetadataItem.InitializationSql checkIfExists
          Records.ItemGroupVersionStatusTypesMetadataItem.InitializationSql checkIfExists
          Records.ItemGroupVersionMetadataItem.InitializationSql checkIfExists
          Records.ItemGroupVersionCategoriesMetadataItem.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
